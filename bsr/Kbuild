obj-m += bsr.o # bsr_transport_tcp.o

clean-files := compat.h .config.timestamp

LINUXINCLUDE := -I$(src) -I$(src)/../bsr-headers $(LINUXINCLUDE)

# Files in the standard include directories take precendence over files
# in the bsr-kernel-compat directory.
#
# Add -I$(src) to EXTRA_CFLAGS again: some (rhel5, maybe other) kbuild does not
# yet use LINUXINCLUDE like we expect it to ;( fortunately it does not contain
# in-tree bsr either yet, so precedence of include files is not important.
#
# override: we absolutely need this, even if EXTRA_CFLAGS originates from make
# command line or environment
override EXTRA_CFLAGS += -I$(src) -I$(src)/bsr-kernel-compat

# BSR-389 add for linux
override EXTRA_CFLAGS += -D_LIN

# The augmented rbtree helper functions are not exported at least until kernel
# version 2.6.38-rc2.
ifeq ($(shell grep -e '\<rb_augment_insert\>' \
		   -e '\<rb_augment_erase_begin\>' \
		   -e '\<rb_augment_erase_end\>' \
		   $(objtree)/Module.symvers | wc -l),3)
override EXTRA_CFLAGS += -DAUGMENTED_RBTREE_SYMBOLS_EXPORTED
endif

ifeq ($(shell grep -e '\<idr_get_next\>' \
		   $(objtree)/Module.symvers | wc -l),1)
override EXTRA_CFLAGS += -DIDR_GET_NEXT_EXPORTED
else
compat_objs += bsr-kernel-compat/idr.o
endif

ifeq ($(shell grep -e '\<blkdev_issue_zeroout\>' \
		   $(objtree)/Module.symvers | wc -l),1)
override EXTRA_CFLAGS += -DBLKDEV_ISSUE_ZEROOUT_EXPORTED
else
compat_objs += bsr-kernel-compat/blkdev_issue_zeroout.o
endif

compat_objs += bsr-kernel-compat/bsr_wrappers.o

bsr-$(CONFIG_DEBUG_FS) += bsr_debugfs.o
bsr-y += ../bsr-platform/linux/bsrhk/bsrhk_init.o
bsr-y += ../bsr-platform/linux/bsrhk/fs_read.o
bsr-y += ../bsr-platform/linux/bsrhk/ext_fs.o
bsr-y += ../bsr-platform/linux/bsrhk/xfs_fs.o
bsr-y += ../bsr-platform/linux/bsrhk/file_ops.o
bsr-y += ../bsr-headers/bsr_strings.o
bsr-y += lru_cache.o bsr_interval.o bsr_nla.o bsr_linux_buildtag.o
bsr-y += bsr_proc.o bsr_bitmap.o bsr_actlog.o
bsr-y += bsr_req.o bsr_state.o
bsr-y += bsr_nl.o bsr_main.o $(compat_objs)
bsr-y += bsr_transport.o bsr_transport_tcp.o
bsr-y += bsr_sender.o bsr_receiver.o 
bsr-y += bsr_send_buf.o
bsr-y += bsr_idx_ring.o
bsr-y += bsr_log.o

ifndef DISABLE_KREF_DEBUGGING_HERE
      override EXTRA_CFLAGS += -DCONFIG_KREF_DEBUG
      bsr-y += kref_debug.o bsr_kref_debug.o
endif

$(addprefix $(obj)/,$(bsr-y)): $(obj)/compat.h

#obj-$(CONFIG_BLK_DEV_BSR)     += bsr.o

# ======================================================================

# Are we in stage 2 of the build (modpost)?

# Apparently GNU Make 4.0 strips leading ./ from MAKEFILE_LIST. Yay.

KBUILD_STAGE ?= $(if $(filter      scripts/Makefile.modpost \
			$(srctree)/scripts/Makefile.modpost,\
			$(MAKEFILE_LIST)),modpost)

ifneq ($(shell date -r $(objtree)/.config),$(shell date -r $(obj)/.config.timestamp 2> /dev/null))
COMPAT_FORCE := FORCE
endif

ifneq ($(KBUILD_STAGE),modpost)
TEST_C := $(wildcard $(src)/bsr-kernel-compat/tests/*.c)
TEST_R := $(TEST_C:$(src)/bsr-kernel-compat/tests/%.c=$(obj)/.compat_test.%.result)
$(obj)/.compat_test.%.result: $(src)/bsr-kernel-compat/tests/%.c $(COMPAT_FORCE)
	$(call cmd,compat_test_result)

quiet_cmd_compat_test_result = COMPAT  $*
      cmd_compat_test_result = \
	var=`echo COMPAT_$* | tr -- -a-z _A-Z | tr -dc A-Z0-9_` ;		\
	if $(CC) $(c_flags) $(COMPAT_CFLAGS) -c -o $(@D)/.compat_test.$*.o $<	\
		-D"KBUILD_MODNAME=\"compat_dummy\""				\
		> $(@D)/.compat_test.$*.stdout 2> $(@D)/.compat_test.$*.stderr; \
	then									\
		echo "\#define $$var" ;						\
	else									\
		echo "/* \#undef $$var */" ;					\
	fi > $@

filechk_compat.h = cat $(TEST_R)

$(obj)/compat.h: $(TEST_R) $(COMPAT_FORCE)
	$(call filechk,compat.h)
	$(Q)touch -r $(objtree)/.config $(obj)/.config.timestamp
else
# remember KERNELRELEASE for install target
# .kernelversion can be included in Makefile as well as
# sourced from shell
$(shell printf "%s\n"				\
	"VERSION=$(VERSION)"			\
	"PATCHLEVEL=$(PATCHLEVEL)"		\
	"SUBLEVEL=$(SUBLEVEL)"			\
	"EXTRAVERSION=$(EXTRAVERSION)"		\
	"LOCALVERSION=$(LOCALVERSION)"		\
	"KERNELRELEASE=$(KERNELRELEASE)"	\
	"KERNELVERSION=$(KERNELVERSION)"	\
	> $(src)/.bsr_kernelrelease.new	\
)
endif


# for some reason some of the commands below only work correctly in bash,
# and not in e.g. dash. I'm too lazy to fix it to be compatible.
SHELL=/bin/bash

$(obj)/bsr_linux_buildtag.c: $(addprefix $(obj)/, $(filter-out bsr_linux_buildtag.o,$(bsr-y)))
	@$(kecho) '  GEN     $@ $(echo-why)'
	@set -e; exec > $@.new;							\
	echo -e "/* automatically generated. DO NOT EDIT. */";			\
	echo -e "#include <bsr.h>";					\
	echo -e "#include \"linux/bsr_config.h\"";				\
	echo -e "const char *bsr_buildtag(void)\n{";				\
	if test -e $(src)/../.git &&						\
	   GITHEAD=$$(cd $(src) && git rev-parse HEAD); then			\
		echo -e "\treturn TAG_VERSION \" GIT-hash: $${GITHEAD:0:7}\"";		\
	elif test -e $(src)/.bsr_git_revision ; then				\
		echo -e "\treturn TAG_VERSION \" $$(cat $(src)/.bsr_git_revision)\"";	\
	elif test -e $@ ; then							\
		grep return $@ ;						\
	else									\
		echo >&2 "Your BSR source tree is broken. Unpack again.";      \
		exit 1;								\
	fi ;									\
	echo -e "\t\t\" build by $$USER@$$HOSTNAME, `date "+%F %T"`\";\n}";	\
	mv -f $@.new $@
